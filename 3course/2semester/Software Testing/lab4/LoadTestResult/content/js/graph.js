/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 317.0, "minX": 0.0, "maxY": 913.0, "series": [{"data": [[0.0, 715.0], [0.1, 715.0], [0.2, 715.0], [0.3, 715.0], [0.4, 715.0], [0.5, 715.0], [0.6, 715.0], [0.7, 715.0], [0.8, 715.0], [0.9, 720.0], [1.0, 720.0], [1.1, 720.0], [1.2, 720.0], [1.3, 720.0], [1.4, 720.0], [1.5, 720.0], [1.6, 720.0], [1.7, 722.0], [1.8, 722.0], [1.9, 722.0], [2.0, 722.0], [2.1, 722.0], [2.2, 722.0], [2.3, 722.0], [2.4, 722.0], [2.5, 724.0], [2.6, 724.0], [2.7, 724.0], [2.8, 724.0], [2.9, 724.0], [3.0, 724.0], [3.1, 724.0], [3.2, 724.0], [3.3, 724.0], [3.4, 725.0], [3.5, 725.0], [3.6, 725.0], [3.7, 725.0], [3.8, 725.0], [3.9, 725.0], [4.0, 725.0], [4.1, 725.0], [4.2, 726.0], [4.3, 726.0], [4.4, 726.0], [4.5, 726.0], [4.6, 726.0], [4.7, 726.0], [4.8, 726.0], [4.9, 726.0], [5.0, 729.0], [5.1, 729.0], [5.2, 729.0], [5.3, 729.0], [5.4, 729.0], [5.5, 729.0], [5.6, 729.0], [5.7, 729.0], [5.8, 729.0], [5.9, 729.0], [6.0, 729.0], [6.1, 729.0], [6.2, 729.0], [6.3, 729.0], [6.4, 729.0], [6.5, 729.0], [6.6, 729.0], [6.7, 731.0], [6.8, 731.0], [6.9, 731.0], [7.0, 731.0], [7.1, 731.0], [7.2, 731.0], [7.3, 731.0], [7.4, 731.0], [7.5, 731.0], [7.6, 731.0], [7.7, 731.0], [7.8, 731.0], [7.9, 731.0], [8.0, 731.0], [8.1, 731.0], [8.2, 731.0], [8.3, 731.0], [8.4, 731.0], [8.5, 731.0], [8.6, 731.0], [8.7, 731.0], [8.8, 731.0], [8.9, 731.0], [9.0, 731.0], [9.1, 731.0], [9.2, 732.0], [9.3, 732.0], [9.4, 732.0], [9.5, 732.0], [9.6, 732.0], [9.7, 732.0], [9.8, 732.0], [9.9, 732.0], [10.0, 732.0], [10.1, 733.0], [10.2, 733.0], [10.3, 733.0], [10.4, 733.0], [10.5, 733.0], [10.6, 733.0], [10.7, 733.0], [10.8, 733.0], [10.9, 734.0], [11.0, 734.0], [11.1, 734.0], [11.2, 734.0], [11.3, 734.0], [11.4, 734.0], [11.5, 734.0], [11.6, 734.0], [11.7, 735.0], [11.8, 735.0], [11.9, 735.0], [12.0, 735.0], [12.1, 735.0], [12.2, 735.0], [12.3, 735.0], [12.4, 735.0], [12.5, 735.0], [12.6, 736.0], [12.7, 736.0], [12.8, 736.0], [12.9, 736.0], [13.0, 736.0], [13.1, 736.0], [13.2, 736.0], [13.3, 736.0], [13.4, 736.0], [13.5, 736.0], [13.6, 736.0], [13.7, 736.0], [13.8, 736.0], [13.9, 736.0], [14.0, 736.0], [14.1, 736.0], [14.2, 736.0], [14.3, 736.0], [14.4, 736.0], [14.5, 736.0], [14.6, 736.0], [14.7, 736.0], [14.8, 736.0], [14.9, 736.0], [15.0, 736.0], [15.1, 737.0], [15.2, 737.0], [15.3, 737.0], [15.4, 737.0], [15.5, 737.0], [15.6, 737.0], [15.7, 737.0], [15.8, 737.0], [15.9, 738.0], [16.0, 738.0], [16.1, 738.0], [16.2, 738.0], [16.3, 738.0], [16.4, 738.0], [16.5, 738.0], [16.6, 738.0], [16.7, 738.0], [16.8, 738.0], [16.9, 738.0], [17.0, 738.0], [17.1, 738.0], [17.2, 738.0], [17.3, 738.0], [17.4, 738.0], [17.5, 738.0], [17.6, 738.0], [17.7, 738.0], [17.8, 738.0], [17.9, 738.0], [18.0, 738.0], [18.1, 738.0], [18.2, 738.0], [18.3, 738.0], [18.4, 739.0], [18.5, 739.0], [18.6, 739.0], [18.7, 739.0], [18.8, 739.0], [18.9, 739.0], [19.0, 739.0], [19.1, 739.0], [19.2, 739.0], [19.3, 739.0], [19.4, 739.0], [19.5, 739.0], [19.6, 739.0], [19.7, 739.0], [19.8, 739.0], [19.9, 739.0], [20.0, 739.0], [20.1, 739.0], [20.2, 739.0], [20.3, 739.0], [20.4, 739.0], [20.5, 739.0], [20.6, 739.0], [20.7, 739.0], [20.8, 739.0], [20.9, 739.0], [21.0, 739.0], [21.1, 739.0], [21.2, 739.0], [21.3, 739.0], [21.4, 739.0], [21.5, 739.0], [21.6, 739.0], [21.7, 741.0], [21.8, 741.0], [21.9, 741.0], [22.0, 741.0], [22.1, 741.0], [22.2, 741.0], [22.3, 741.0], [22.4, 741.0], [22.5, 741.0], [22.6, 741.0], [22.7, 741.0], [22.8, 741.0], [22.9, 741.0], [23.0, 741.0], [23.1, 741.0], [23.2, 741.0], [23.3, 741.0], [23.4, 744.0], [23.5, 744.0], [23.6, 744.0], [23.7, 744.0], [23.8, 744.0], [23.9, 744.0], [24.0, 744.0], [24.1, 744.0], [24.2, 744.0], [24.3, 744.0], [24.4, 744.0], [24.5, 744.0], [24.6, 744.0], [24.7, 744.0], [24.8, 744.0], [24.9, 744.0], [25.0, 744.0], [25.1, 745.0], [25.2, 745.0], [25.3, 745.0], [25.4, 745.0], [25.5, 745.0], [25.6, 745.0], [25.7, 745.0], [25.8, 745.0], [25.9, 747.0], [26.0, 747.0], [26.1, 747.0], [26.2, 747.0], [26.3, 747.0], [26.4, 747.0], [26.5, 747.0], [26.6, 747.0], [26.7, 749.0], [26.8, 749.0], [26.9, 749.0], [27.0, 749.0], [27.1, 749.0], [27.2, 749.0], [27.3, 749.0], [27.4, 749.0], [27.5, 749.0], [27.6, 749.0], [27.7, 749.0], [27.8, 749.0], [27.9, 749.0], [28.0, 749.0], [28.1, 749.0], [28.2, 749.0], [28.3, 749.0], [28.4, 749.0], [28.5, 749.0], [28.6, 749.0], [28.7, 749.0], [28.8, 749.0], [28.9, 749.0], [29.0, 749.0], [29.1, 749.0], [29.2, 750.0], [29.3, 750.0], [29.4, 750.0], [29.5, 750.0], [29.6, 750.0], [29.7, 750.0], [29.8, 750.0], [29.9, 750.0], [30.0, 751.0], [30.1, 751.0], [30.2, 751.0], [30.3, 751.0], [30.4, 751.0], [30.5, 751.0], [30.6, 751.0], [30.7, 751.0], [30.8, 751.0], [30.9, 751.0], [31.0, 751.0], [31.1, 751.0], [31.2, 751.0], [31.3, 751.0], [31.4, 751.0], [31.5, 751.0], [31.6, 751.0], [31.7, 751.0], [31.8, 751.0], [31.9, 751.0], [32.0, 751.0], [32.1, 751.0], [32.2, 751.0], [32.3, 751.0], [32.4, 751.0], [32.5, 752.0], [32.6, 752.0], [32.7, 752.0], [32.8, 752.0], [32.9, 752.0], [33.0, 752.0], [33.1, 752.0], [33.2, 752.0], [33.3, 752.0], [33.4, 752.0], [33.5, 752.0], [33.6, 752.0], [33.7, 752.0], [33.8, 752.0], [33.9, 752.0], [34.0, 752.0], [34.1, 752.0], [34.2, 753.0], [34.3, 753.0], [34.4, 753.0], [34.5, 753.0], [34.6, 753.0], [34.7, 753.0], [34.8, 753.0], [34.9, 753.0], [35.0, 753.0], [35.1, 753.0], [35.2, 753.0], [35.3, 753.0], [35.4, 753.0], [35.5, 753.0], [35.6, 753.0], [35.7, 753.0], [35.8, 753.0], [35.9, 753.0], [36.0, 753.0], [36.1, 753.0], [36.2, 753.0], [36.3, 753.0], [36.4, 753.0], [36.5, 753.0], [36.6, 753.0], [36.7, 753.0], [36.8, 753.0], [36.9, 753.0], [37.0, 753.0], [37.1, 753.0], [37.2, 753.0], [37.3, 753.0], [37.4, 753.0], [37.5, 754.0], [37.6, 754.0], [37.7, 754.0], [37.8, 754.0], [37.9, 754.0], [38.0, 754.0], [38.1, 754.0], [38.2, 754.0], [38.3, 754.0], [38.4, 754.0], [38.5, 754.0], [38.6, 754.0], [38.7, 754.0], [38.8, 754.0], [38.9, 754.0], [39.0, 754.0], [39.1, 754.0], [39.2, 754.0], [39.3, 754.0], [39.4, 754.0], [39.5, 754.0], [39.6, 754.0], [39.7, 754.0], [39.8, 754.0], [39.9, 754.0], [40.0, 756.0], [40.1, 756.0], [40.2, 756.0], [40.3, 756.0], [40.4, 756.0], [40.5, 756.0], [40.6, 756.0], [40.7, 756.0], [40.8, 756.0], [40.9, 756.0], [41.0, 756.0], [41.1, 756.0], [41.2, 756.0], [41.3, 756.0], [41.4, 756.0], [41.5, 756.0], [41.6, 756.0], [41.7, 756.0], [41.8, 756.0], [41.9, 756.0], [42.0, 756.0], [42.1, 756.0], [42.2, 756.0], [42.3, 756.0], [42.4, 756.0], [42.5, 757.0], [42.6, 757.0], [42.7, 757.0], [42.8, 757.0], [42.9, 757.0], [43.0, 757.0], [43.1, 757.0], [43.2, 757.0], [43.3, 757.0], [43.4, 757.0], [43.5, 757.0], [43.6, 757.0], [43.7, 757.0], [43.8, 757.0], [43.9, 757.0], [44.0, 757.0], [44.1, 757.0], [44.2, 757.0], [44.3, 757.0], [44.4, 757.0], [44.5, 757.0], [44.6, 757.0], [44.7, 757.0], [44.8, 757.0], [44.9, 757.0], [45.0, 757.0], [45.1, 757.0], [45.2, 757.0], [45.3, 757.0], [45.4, 757.0], [45.5, 757.0], [45.6, 757.0], [45.7, 757.0], [45.8, 757.0], [45.9, 757.0], [46.0, 757.0], [46.1, 757.0], [46.2, 757.0], [46.3, 757.0], [46.4, 757.0], [46.5, 757.0], [46.6, 757.0], [46.7, 758.0], [46.8, 758.0], [46.9, 758.0], [47.0, 758.0], [47.1, 758.0], [47.2, 758.0], [47.3, 758.0], [47.4, 758.0], [47.5, 759.0], [47.6, 759.0], [47.7, 759.0], [47.8, 759.0], [47.9, 759.0], [48.0, 759.0], [48.1, 759.0], [48.2, 759.0], [48.3, 759.0], [48.4, 759.0], [48.5, 759.0], [48.6, 759.0], [48.7, 759.0], [48.8, 759.0], [48.9, 759.0], [49.0, 759.0], [49.1, 759.0], [49.2, 760.0], [49.3, 760.0], [49.4, 760.0], [49.5, 760.0], [49.6, 760.0], [49.7, 760.0], [49.8, 760.0], [49.9, 760.0], [50.0, 760.0], [50.1, 760.0], [50.2, 760.0], [50.3, 760.0], [50.4, 760.0], [50.5, 760.0], [50.6, 760.0], [50.7, 760.0], [50.8, 760.0], [50.9, 760.0], [51.0, 760.0], [51.1, 760.0], [51.2, 760.0], [51.3, 760.0], [51.4, 760.0], [51.5, 760.0], [51.6, 760.0], [51.7, 761.0], [51.8, 761.0], [51.9, 761.0], [52.0, 761.0], [52.1, 761.0], [52.2, 761.0], [52.3, 761.0], [52.4, 761.0], [52.5, 761.0], [52.6, 761.0], [52.7, 761.0], [52.8, 761.0], [52.9, 761.0], [53.0, 761.0], [53.1, 761.0], [53.2, 761.0], [53.3, 761.0], [53.4, 763.0], [53.5, 763.0], [53.6, 763.0], [53.7, 763.0], [53.8, 763.0], [53.9, 763.0], [54.0, 763.0], [54.1, 763.0], [54.2, 764.0], [54.3, 764.0], [54.4, 764.0], [54.5, 764.0], [54.6, 764.0], [54.7, 764.0], [54.8, 764.0], [54.9, 764.0], [55.0, 764.0], [55.1, 764.0], [55.2, 764.0], [55.3, 764.0], [55.4, 764.0], [55.5, 764.0], [55.6, 764.0], [55.7, 764.0], [55.8, 764.0], [55.9, 765.0], [56.0, 765.0], [56.1, 765.0], [56.2, 765.0], [56.3, 765.0], [56.4, 765.0], [56.5, 765.0], [56.6, 765.0], [56.7, 766.0], [56.8, 766.0], [56.9, 766.0], [57.0, 766.0], [57.1, 766.0], [57.2, 766.0], [57.3, 766.0], [57.4, 766.0], [57.5, 766.0], [57.6, 766.0], [57.7, 766.0], [57.8, 766.0], [57.9, 766.0], [58.0, 766.0], [58.1, 766.0], [58.2, 766.0], [58.3, 766.0], [58.4, 767.0], [58.5, 767.0], [58.6, 767.0], [58.7, 767.0], [58.8, 767.0], [58.9, 767.0], [59.0, 767.0], [59.1, 767.0], [59.2, 768.0], [59.3, 768.0], [59.4, 768.0], [59.5, 768.0], [59.6, 768.0], [59.7, 768.0], [59.8, 768.0], [59.9, 768.0], [60.0, 768.0], [60.1, 768.0], [60.2, 768.0], [60.3, 768.0], [60.4, 768.0], [60.5, 768.0], [60.6, 768.0], [60.7, 768.0], [60.8, 768.0], [60.9, 771.0], [61.0, 771.0], [61.1, 771.0], [61.2, 771.0], [61.3, 771.0], [61.4, 771.0], [61.5, 771.0], [61.6, 771.0], [61.7, 774.0], [61.8, 774.0], [61.9, 774.0], [62.0, 774.0], [62.1, 774.0], [62.2, 774.0], [62.3, 774.0], [62.4, 774.0], [62.5, 776.0], [62.6, 776.0], [62.7, 776.0], [62.8, 776.0], [62.9, 776.0], [63.0, 776.0], [63.1, 776.0], [63.2, 776.0], [63.3, 776.0], [63.4, 776.0], [63.5, 776.0], [63.6, 776.0], [63.7, 776.0], [63.8, 776.0], [63.9, 776.0], [64.0, 776.0], [64.1, 776.0], [64.2, 777.0], [64.3, 777.0], [64.4, 777.0], [64.5, 777.0], [64.6, 777.0], [64.7, 777.0], [64.8, 777.0], [64.9, 777.0], [65.0, 778.0], [65.1, 778.0], [65.2, 778.0], [65.3, 778.0], [65.4, 778.0], [65.5, 778.0], [65.6, 778.0], [65.7, 778.0], [65.8, 778.0], [65.9, 778.0], [66.0, 778.0], [66.1, 778.0], [66.2, 778.0], [66.3, 778.0], [66.4, 778.0], [66.5, 778.0], [66.6, 778.0], [66.7, 778.0], [66.8, 778.0], [66.9, 778.0], [67.0, 778.0], [67.1, 778.0], [67.2, 778.0], [67.3, 778.0], [67.4, 778.0], [67.5, 779.0], [67.6, 779.0], [67.7, 779.0], [67.8, 779.0], [67.9, 779.0], [68.0, 779.0], [68.1, 779.0], [68.2, 779.0], [68.3, 779.0], [68.4, 782.0], [68.5, 782.0], [68.6, 782.0], [68.7, 782.0], [68.8, 782.0], [68.9, 782.0], [69.0, 782.0], [69.1, 782.0], [69.2, 783.0], [69.3, 783.0], [69.4, 783.0], [69.5, 783.0], [69.6, 783.0], [69.7, 783.0], [69.8, 783.0], [69.9, 783.0], [70.0, 784.0], [70.1, 784.0], [70.2, 784.0], [70.3, 784.0], [70.4, 784.0], [70.5, 784.0], [70.6, 784.0], [70.7, 784.0], [70.8, 784.0], [70.9, 785.0], [71.0, 785.0], [71.1, 785.0], [71.2, 785.0], [71.3, 785.0], [71.4, 785.0], [71.5, 785.0], [71.6, 785.0], [71.7, 786.0], [71.8, 786.0], [71.9, 786.0], [72.0, 786.0], [72.1, 786.0], [72.2, 786.0], [72.3, 786.0], [72.4, 786.0], [72.5, 790.0], [72.6, 790.0], [72.7, 790.0], [72.8, 790.0], [72.9, 790.0], [73.0, 790.0], [73.1, 790.0], [73.2, 790.0], [73.3, 790.0], [73.4, 795.0], [73.5, 795.0], [73.6, 795.0], [73.7, 795.0], [73.8, 795.0], [73.9, 795.0], [74.0, 795.0], [74.1, 795.0], [74.2, 796.0], [74.3, 796.0], [74.4, 796.0], [74.5, 796.0], [74.6, 796.0], [74.7, 796.0], [74.8, 796.0], [74.9, 796.0], [75.0, 798.0], [75.1, 798.0], [75.2, 798.0], [75.3, 798.0], [75.4, 798.0], [75.5, 798.0], [75.6, 798.0], [75.7, 798.0], [75.8, 798.0], [75.9, 798.0], [76.0, 798.0], [76.1, 798.0], [76.2, 798.0], [76.3, 798.0], [76.4, 798.0], [76.5, 798.0], [76.6, 798.0], [76.7, 799.0], [76.8, 799.0], [76.9, 799.0], [77.0, 799.0], [77.1, 799.0], [77.2, 799.0], [77.3, 799.0], [77.4, 799.0], [77.5, 802.0], [77.6, 802.0], [77.7, 802.0], [77.8, 802.0], [77.9, 802.0], [78.0, 802.0], [78.1, 802.0], [78.2, 802.0], [78.3, 802.0], [78.4, 802.0], [78.5, 802.0], [78.6, 802.0], [78.7, 802.0], [78.8, 802.0], [78.9, 802.0], [79.0, 802.0], [79.1, 802.0], [79.2, 805.0], [79.3, 805.0], [79.4, 805.0], [79.5, 805.0], [79.6, 805.0], [79.7, 805.0], [79.8, 805.0], [79.9, 805.0], [80.0, 808.0], [80.1, 808.0], [80.2, 808.0], [80.3, 808.0], [80.4, 808.0], [80.5, 808.0], [80.6, 808.0], [80.7, 808.0], [80.8, 808.0], [80.9, 809.0], [81.0, 809.0], [81.1, 809.0], [81.2, 809.0], [81.3, 809.0], [81.4, 809.0], [81.5, 809.0], [81.6, 809.0], [81.7, 809.0], [81.8, 809.0], [81.9, 809.0], [82.0, 809.0], [82.1, 809.0], [82.2, 809.0], [82.3, 809.0], [82.4, 809.0], [82.5, 818.0], [82.6, 818.0], [82.7, 818.0], [82.8, 818.0], [82.9, 818.0], [83.0, 818.0], [83.1, 818.0], [83.2, 818.0], [83.3, 818.0], [83.4, 821.0], [83.5, 821.0], [83.6, 821.0], [83.7, 821.0], [83.8, 821.0], [83.9, 821.0], [84.0, 821.0], [84.1, 821.0], [84.2, 822.0], [84.3, 822.0], [84.4, 822.0], [84.5, 822.0], [84.6, 822.0], [84.7, 822.0], [84.8, 822.0], [84.9, 822.0], [85.0, 823.0], [85.1, 823.0], [85.2, 823.0], [85.3, 823.0], [85.4, 823.0], [85.5, 823.0], [85.6, 823.0], [85.7, 823.0], [85.8, 823.0], [85.9, 824.0], [86.0, 824.0], [86.1, 824.0], [86.2, 824.0], [86.3, 824.0], [86.4, 824.0], [86.5, 824.0], [86.6, 824.0], [86.7, 826.0], [86.8, 826.0], [86.9, 826.0], [87.0, 826.0], [87.1, 826.0], [87.2, 826.0], [87.3, 826.0], [87.4, 826.0], [87.5, 829.0], [87.6, 829.0], [87.7, 829.0], [87.8, 829.0], [87.9, 829.0], [88.0, 829.0], [88.1, 829.0], [88.2, 829.0], [88.3, 829.0], [88.4, 833.0], [88.5, 833.0], [88.6, 833.0], [88.7, 833.0], [88.8, 833.0], [88.9, 833.0], [89.0, 833.0], [89.1, 833.0], [89.2, 836.0], [89.3, 836.0], [89.4, 836.0], [89.5, 836.0], [89.6, 836.0], [89.7, 836.0], [89.8, 836.0], [89.9, 836.0], [90.0, 841.0], [90.1, 841.0], [90.2, 841.0], [90.3, 841.0], [90.4, 841.0], [90.5, 841.0], [90.6, 841.0], [90.7, 841.0], [90.8, 841.0], [90.9, 845.0], [91.0, 845.0], [91.1, 845.0], [91.2, 845.0], [91.3, 845.0], [91.4, 845.0], [91.5, 845.0], [91.6, 845.0], [91.7, 845.0], [91.8, 845.0], [91.9, 845.0], [92.0, 845.0], [92.1, 845.0], [92.2, 845.0], [92.3, 845.0], [92.4, 845.0], [92.5, 847.0], [92.6, 847.0], [92.7, 847.0], [92.8, 847.0], [92.9, 847.0], [93.0, 847.0], [93.1, 847.0], [93.2, 847.0], [93.3, 847.0], [93.4, 847.0], [93.5, 847.0], [93.6, 847.0], [93.7, 847.0], [93.8, 847.0], [93.9, 847.0], [94.0, 847.0], [94.1, 847.0], [94.2, 856.0], [94.3, 856.0], [94.4, 856.0], [94.5, 856.0], [94.6, 856.0], [94.7, 856.0], [94.8, 856.0], [94.9, 856.0], [95.0, 857.0], [95.1, 857.0], [95.2, 857.0], [95.3, 857.0], [95.4, 857.0], [95.5, 857.0], [95.6, 857.0], [95.7, 857.0], [95.8, 857.0], [95.9, 857.0], [96.0, 857.0], [96.1, 857.0], [96.2, 857.0], [96.3, 857.0], [96.4, 857.0], [96.5, 857.0], [96.6, 857.0], [96.7, 868.0], [96.8, 868.0], [96.9, 868.0], [97.0, 868.0], [97.1, 868.0], [97.2, 868.0], [97.3, 868.0], [97.4, 868.0], [97.5, 876.0], [97.6, 876.0], [97.7, 876.0], [97.8, 876.0], [97.9, 876.0], [98.0, 876.0], [98.1, 876.0], [98.2, 876.0], [98.3, 876.0], [98.4, 890.0], [98.5, 890.0], [98.6, 890.0], [98.7, 890.0], [98.8, 890.0], [98.9, 890.0], [99.0, 890.0], [99.1, 890.0], [99.2, 913.0], [99.3, 913.0], [99.4, 913.0], [99.5, 913.0], [99.6, 913.0], [99.7, 913.0], [99.8, 913.0], [99.9, 913.0]], "isOverall": false, "label": "Configuration №1 HTTP Request", "isController": false}, {"data": [[0.0, 317.0], [0.1, 317.0], [0.2, 317.0], [0.3, 317.0], [0.4, 317.0], [0.5, 317.0], [0.6, 317.0], [0.7, 317.0], [0.8, 317.0], [0.9, 317.0], [1.0, 317.0], [1.1, 317.0], [1.2, 317.0], [1.3, 317.0], [1.4, 317.0], [1.5, 317.0], [1.6, 317.0], [1.7, 325.0], [1.8, 325.0], [1.9, 325.0], [2.0, 325.0], [2.1, 325.0], [2.2, 325.0], [2.3, 325.0], [2.4, 325.0], [2.5, 327.0], [2.6, 327.0], [2.7, 327.0], [2.8, 327.0], [2.9, 327.0], [3.0, 327.0], [3.1, 327.0], [3.2, 327.0], [3.3, 327.0], [3.4, 329.0], [3.5, 329.0], [3.6, 329.0], [3.7, 329.0], [3.8, 329.0], [3.9, 329.0], [4.0, 329.0], [4.1, 329.0], [4.2, 330.0], [4.3, 330.0], [4.4, 330.0], [4.5, 330.0], [4.6, 330.0], [4.7, 330.0], [4.8, 330.0], [4.9, 330.0], [5.0, 331.0], [5.1, 331.0], [5.2, 331.0], [5.3, 331.0], [5.4, 331.0], [5.5, 331.0], [5.6, 331.0], [5.7, 331.0], [5.8, 331.0], [5.9, 332.0], [6.0, 332.0], [6.1, 332.0], [6.2, 332.0], [6.3, 332.0], [6.4, 332.0], [6.5, 332.0], [6.6, 332.0], [6.7, 336.0], [6.8, 336.0], [6.9, 336.0], [7.0, 336.0], [7.1, 336.0], [7.2, 336.0], [7.3, 336.0], [7.4, 336.0], [7.5, 337.0], [7.6, 337.0], [7.7, 337.0], [7.8, 337.0], [7.9, 337.0], [8.0, 337.0], [8.1, 337.0], [8.2, 337.0], [8.3, 337.0], [8.4, 337.0], [8.5, 337.0], [8.6, 337.0], [8.7, 337.0], [8.8, 337.0], [8.9, 337.0], [9.0, 337.0], [9.1, 337.0], [9.2, 338.0], [9.3, 338.0], [9.4, 338.0], [9.5, 338.0], [9.6, 338.0], [9.7, 338.0], [9.8, 338.0], [9.9, 338.0], [10.0, 338.0], [10.1, 338.0], [10.2, 338.0], [10.3, 338.0], [10.4, 338.0], [10.5, 338.0], [10.6, 338.0], [10.7, 338.0], [10.8, 338.0], [10.9, 340.0], [11.0, 340.0], [11.1, 340.0], [11.2, 340.0], [11.3, 340.0], [11.4, 340.0], [11.5, 340.0], [11.6, 340.0], [11.7, 340.0], [11.8, 340.0], [11.9, 340.0], [12.0, 340.0], [12.1, 340.0], [12.2, 340.0], [12.3, 340.0], [12.4, 340.0], [12.5, 340.0], [12.6, 340.0], [12.7, 340.0], [12.8, 340.0], [12.9, 340.0], [13.0, 340.0], [13.1, 340.0], [13.2, 340.0], [13.3, 340.0], [13.4, 341.0], [13.5, 341.0], [13.6, 341.0], [13.7, 341.0], [13.8, 341.0], [13.9, 341.0], [14.0, 341.0], [14.1, 341.0], [14.2, 342.0], [14.3, 342.0], [14.4, 342.0], [14.5, 342.0], [14.6, 342.0], [14.7, 342.0], [14.8, 342.0], [14.9, 342.0], [15.0, 342.0], [15.1, 342.0], [15.2, 342.0], [15.3, 342.0], [15.4, 342.0], [15.5, 342.0], [15.6, 342.0], [15.7, 342.0], [15.8, 342.0], [15.9, 343.0], [16.0, 343.0], [16.1, 343.0], [16.2, 343.0], [16.3, 343.0], [16.4, 343.0], [16.5, 343.0], [16.6, 343.0], [16.7, 344.0], [16.8, 344.0], [16.9, 344.0], [17.0, 344.0], [17.1, 344.0], [17.2, 344.0], [17.3, 344.0], [17.4, 344.0], [17.5, 346.0], [17.6, 346.0], [17.7, 346.0], [17.8, 346.0], [17.9, 346.0], [18.0, 346.0], [18.1, 346.0], [18.2, 346.0], [18.3, 346.0], [18.4, 347.0], [18.5, 347.0], [18.6, 347.0], [18.7, 347.0], [18.8, 347.0], [18.9, 347.0], [19.0, 347.0], [19.1, 347.0], [19.2, 347.0], [19.3, 347.0], [19.4, 347.0], [19.5, 347.0], [19.6, 347.0], [19.7, 347.0], [19.8, 347.0], [19.9, 347.0], [20.0, 349.0], [20.1, 349.0], [20.2, 349.0], [20.3, 349.0], [20.4, 349.0], [20.5, 349.0], [20.6, 349.0], [20.7, 349.0], [20.8, 349.0], [20.9, 349.0], [21.0, 349.0], [21.1, 349.0], [21.2, 349.0], [21.3, 349.0], [21.4, 349.0], [21.5, 349.0], [21.6, 349.0], [21.7, 351.0], [21.8, 351.0], [21.9, 351.0], [22.0, 351.0], [22.1, 351.0], [22.2, 351.0], [22.3, 351.0], [22.4, 351.0], [22.5, 351.0], [22.6, 351.0], [22.7, 351.0], [22.8, 351.0], [22.9, 351.0], [23.0, 351.0], [23.1, 351.0], [23.2, 351.0], [23.3, 351.0], [23.4, 352.0], [23.5, 352.0], [23.6, 352.0], [23.7, 352.0], [23.8, 352.0], [23.9, 352.0], [24.0, 352.0], [24.1, 352.0], [24.2, 353.0], [24.3, 353.0], [24.4, 353.0], [24.5, 353.0], [24.6, 353.0], [24.7, 353.0], [24.8, 353.0], [24.9, 353.0], [25.0, 355.0], [25.1, 355.0], [25.2, 355.0], [25.3, 355.0], [25.4, 355.0], [25.5, 355.0], [25.6, 355.0], [25.7, 355.0], [25.8, 355.0], [25.9, 355.0], [26.0, 355.0], [26.1, 355.0], [26.2, 355.0], [26.3, 355.0], [26.4, 355.0], [26.5, 355.0], [26.6, 355.0], [26.7, 355.0], [26.8, 355.0], [26.9, 355.0], [27.0, 355.0], [27.1, 355.0], [27.2, 355.0], [27.3, 355.0], [27.4, 355.0], [27.5, 356.0], [27.6, 356.0], [27.7, 356.0], [27.8, 356.0], [27.9, 356.0], [28.0, 356.0], [28.1, 356.0], [28.2, 356.0], [28.3, 356.0], [28.4, 357.0], [28.5, 357.0], [28.6, 357.0], [28.7, 357.0], [28.8, 357.0], [28.9, 357.0], [29.0, 357.0], [29.1, 357.0], [29.2, 358.0], [29.3, 358.0], [29.4, 358.0], [29.5, 358.0], [29.6, 358.0], [29.7, 358.0], [29.8, 358.0], [29.9, 358.0], [30.0, 358.0], [30.1, 358.0], [30.2, 358.0], [30.3, 358.0], [30.4, 358.0], [30.5, 358.0], [30.6, 358.0], [30.7, 358.0], [30.8, 358.0], [30.9, 360.0], [31.0, 360.0], [31.1, 360.0], [31.2, 360.0], [31.3, 360.0], [31.4, 360.0], [31.5, 360.0], [31.6, 360.0], [31.7, 361.0], [31.8, 361.0], [31.9, 361.0], [32.0, 361.0], [32.1, 361.0], [32.2, 361.0], [32.3, 361.0], [32.4, 361.0], [32.5, 364.0], [32.6, 364.0], [32.7, 364.0], [32.8, 364.0], [32.9, 364.0], [33.0, 364.0], [33.1, 364.0], [33.2, 364.0], [33.3, 364.0], [33.4, 365.0], [33.5, 365.0], [33.6, 365.0], [33.7, 365.0], [33.8, 365.0], [33.9, 365.0], [34.0, 365.0], [34.1, 365.0], [34.2, 366.0], [34.3, 366.0], [34.4, 366.0], [34.5, 366.0], [34.6, 366.0], [34.7, 366.0], [34.8, 366.0], [34.9, 366.0], [35.0, 367.0], [35.1, 367.0], [35.2, 367.0], [35.3, 367.0], [35.4, 367.0], [35.5, 367.0], [35.6, 367.0], [35.7, 367.0], [35.8, 367.0], [35.9, 367.0], [36.0, 367.0], [36.1, 367.0], [36.2, 367.0], [36.3, 367.0], [36.4, 367.0], [36.5, 367.0], [36.6, 367.0], [36.7, 368.0], [36.8, 368.0], [36.9, 368.0], [37.0, 368.0], [37.1, 368.0], [37.2, 368.0], [37.3, 368.0], [37.4, 368.0], [37.5, 368.0], [37.6, 368.0], [37.7, 368.0], [37.8, 368.0], [37.9, 368.0], [38.0, 368.0], [38.1, 368.0], [38.2, 368.0], [38.3, 368.0], [38.4, 371.0], [38.5, 371.0], [38.6, 371.0], [38.7, 371.0], [38.8, 371.0], [38.9, 371.0], [39.0, 371.0], [39.1, 371.0], [39.2, 371.0], [39.3, 371.0], [39.4, 371.0], [39.5, 371.0], [39.6, 371.0], [39.7, 371.0], [39.8, 371.0], [39.9, 371.0], [40.0, 376.0], [40.1, 376.0], [40.2, 376.0], [40.3, 376.0], [40.4, 376.0], [40.5, 376.0], [40.6, 376.0], [40.7, 376.0], [40.8, 376.0], [40.9, 378.0], [41.0, 378.0], [41.1, 378.0], [41.2, 378.0], [41.3, 378.0], [41.4, 378.0], [41.5, 378.0], [41.6, 378.0], [41.7, 378.0], [41.8, 378.0], [41.9, 378.0], [42.0, 378.0], [42.1, 378.0], [42.2, 378.0], [42.3, 378.0], [42.4, 378.0], [42.5, 379.0], [42.6, 379.0], [42.7, 379.0], [42.8, 379.0], [42.9, 379.0], [43.0, 379.0], [43.1, 379.0], [43.2, 379.0], [43.3, 379.0], [43.4, 381.0], [43.5, 381.0], [43.6, 381.0], [43.7, 381.0], [43.8, 381.0], [43.9, 381.0], [44.0, 381.0], [44.1, 381.0], [44.2, 381.0], [44.3, 381.0], [44.4, 381.0], [44.5, 381.0], [44.6, 381.0], [44.7, 381.0], [44.8, 381.0], [44.9, 381.0], [45.0, 383.0], [45.1, 383.0], [45.2, 383.0], [45.3, 383.0], [45.4, 383.0], [45.5, 383.0], [45.6, 383.0], [45.7, 383.0], [45.8, 383.0], [45.9, 384.0], [46.0, 384.0], [46.1, 384.0], [46.2, 384.0], [46.3, 384.0], [46.4, 384.0], [46.5, 384.0], [46.6, 384.0], [46.7, 386.0], [46.8, 386.0], [46.9, 386.0], [47.0, 386.0], [47.1, 386.0], [47.2, 386.0], [47.3, 386.0], [47.4, 386.0], [47.5, 387.0], [47.6, 387.0], [47.7, 387.0], [47.8, 387.0], [47.9, 387.0], [48.0, 387.0], [48.1, 387.0], [48.2, 387.0], [48.3, 387.0], [48.4, 387.0], [48.5, 387.0], [48.6, 387.0], [48.7, 387.0], [48.8, 387.0], [48.9, 387.0], [49.0, 387.0], [49.1, 387.0], [49.2, 387.0], [49.3, 387.0], [49.4, 387.0], [49.5, 387.0], [49.6, 387.0], [49.7, 387.0], [49.8, 387.0], [49.9, 387.0], [50.0, 388.0], [50.1, 388.0], [50.2, 388.0], [50.3, 388.0], [50.4, 388.0], [50.5, 388.0], [50.6, 388.0], [50.7, 388.0], [50.8, 388.0], [50.9, 388.0], [51.0, 388.0], [51.1, 388.0], [51.2, 388.0], [51.3, 388.0], [51.4, 388.0], [51.5, 388.0], [51.6, 388.0], [51.7, 392.0], [51.8, 392.0], [51.9, 392.0], [52.0, 392.0], [52.1, 392.0], [52.2, 392.0], [52.3, 392.0], [52.4, 392.0], [52.5, 394.0], [52.6, 394.0], [52.7, 394.0], [52.8, 394.0], [52.9, 394.0], [53.0, 394.0], [53.1, 394.0], [53.2, 394.0], [53.3, 394.0], [53.4, 397.0], [53.5, 397.0], [53.6, 397.0], [53.7, 397.0], [53.8, 397.0], [53.9, 397.0], [54.0, 397.0], [54.1, 397.0], [54.2, 398.0], [54.3, 398.0], [54.4, 398.0], [54.5, 398.0], [54.6, 398.0], [54.7, 398.0], [54.8, 398.0], [54.9, 398.0], [55.0, 398.0], [55.1, 398.0], [55.2, 398.0], [55.3, 398.0], [55.4, 398.0], [55.5, 398.0], [55.6, 398.0], [55.7, 398.0], [55.8, 398.0], [55.9, 406.0], [56.0, 406.0], [56.1, 406.0], [56.2, 406.0], [56.3, 406.0], [56.4, 406.0], [56.5, 406.0], [56.6, 406.0], [56.7, 407.0], [56.8, 407.0], [56.9, 407.0], [57.0, 407.0], [57.1, 407.0], [57.2, 407.0], [57.3, 407.0], [57.4, 407.0], [57.5, 407.0], [57.6, 416.0], [57.7, 416.0], [57.8, 416.0], [57.9, 416.0], [58.0, 416.0], [58.1, 416.0], [58.2, 416.0], [58.3, 416.0], [58.4, 416.0], [58.5, 416.0], [58.6, 416.0], [58.7, 416.0], [58.8, 416.0], [58.9, 416.0], [59.0, 416.0], [59.1, 416.0], [59.2, 416.0], [59.3, 416.0], [59.4, 416.0], [59.5, 416.0], [59.6, 416.0], [59.7, 416.0], [59.8, 416.0], [59.9, 416.0], [60.0, 416.0], [60.1, 416.0], [60.2, 416.0], [60.3, 416.0], [60.4, 416.0], [60.5, 416.0], [60.6, 416.0], [60.7, 416.0], [60.8, 416.0], [60.9, 419.0], [61.0, 419.0], [61.1, 419.0], [61.2, 419.0], [61.3, 419.0], [61.4, 419.0], [61.5, 419.0], [61.6, 419.0], [61.7, 423.0], [61.8, 423.0], [61.9, 423.0], [62.0, 423.0], [62.1, 423.0], [62.2, 423.0], [62.3, 423.0], [62.4, 423.0], [62.5, 423.0], [62.6, 423.0], [62.7, 423.0], [62.8, 423.0], [62.9, 423.0], [63.0, 423.0], [63.1, 423.0], [63.2, 423.0], [63.3, 423.0], [63.4, 425.0], [63.5, 425.0], [63.6, 425.0], [63.7, 425.0], [63.8, 425.0], [63.9, 425.0], [64.0, 425.0], [64.1, 425.0], [64.2, 432.0], [64.3, 432.0], [64.4, 432.0], [64.5, 432.0], [64.6, 432.0], [64.7, 432.0], [64.8, 432.0], [64.9, 432.0], [65.0, 435.0], [65.1, 435.0], [65.2, 435.0], [65.3, 435.0], [65.4, 435.0], [65.5, 435.0], [65.6, 435.0], [65.7, 435.0], [65.8, 435.0], [65.9, 435.0], [66.0, 435.0], [66.1, 435.0], [66.2, 435.0], [66.3, 435.0], [66.4, 435.0], [66.5, 435.0], [66.6, 435.0], [66.7, 436.0], [66.8, 436.0], [66.9, 436.0], [67.0, 436.0], [67.1, 436.0], [67.2, 436.0], [67.3, 436.0], [67.4, 436.0], [67.5, 438.0], [67.6, 438.0], [67.7, 438.0], [67.8, 438.0], [67.9, 438.0], [68.0, 438.0], [68.1, 438.0], [68.2, 438.0], [68.3, 438.0], [68.4, 440.0], [68.5, 440.0], [68.6, 440.0], [68.7, 440.0], [68.8, 440.0], [68.9, 440.0], [69.0, 440.0], [69.1, 440.0], [69.2, 443.0], [69.3, 443.0], [69.4, 443.0], [69.5, 443.0], [69.6, 443.0], [69.7, 443.0], [69.8, 443.0], [69.9, 443.0], [70.0, 444.0], [70.1, 444.0], [70.2, 444.0], [70.3, 444.0], [70.4, 444.0], [70.5, 444.0], [70.6, 444.0], [70.7, 444.0], [70.8, 444.0], [70.9, 444.0], [71.0, 444.0], [71.1, 444.0], [71.2, 444.0], [71.3, 444.0], [71.4, 444.0], [71.5, 444.0], [71.6, 444.0], [71.7, 445.0], [71.8, 445.0], [71.9, 445.0], [72.0, 445.0], [72.1, 445.0], [72.2, 445.0], [72.3, 445.0], [72.4, 445.0], [72.5, 446.0], [72.6, 446.0], [72.7, 446.0], [72.8, 446.0], [72.9, 446.0], [73.0, 446.0], [73.1, 446.0], [73.2, 446.0], [73.3, 446.0], [73.4, 447.0], [73.5, 447.0], [73.6, 447.0], [73.7, 447.0], [73.8, 447.0], [73.9, 447.0], [74.0, 447.0], [74.1, 447.0], [74.2, 449.0], [74.3, 449.0], [74.4, 449.0], [74.5, 449.0], [74.6, 449.0], [74.7, 449.0], [74.8, 449.0], [74.9, 449.0], [75.0, 449.0], [75.1, 449.0], [75.2, 449.0], [75.3, 449.0], [75.4, 449.0], [75.5, 449.0], [75.6, 449.0], [75.7, 449.0], [75.8, 449.0], [75.9, 450.0], [76.0, 450.0], [76.1, 450.0], [76.2, 450.0], [76.3, 450.0], [76.4, 450.0], [76.5, 450.0], [76.6, 450.0], [76.7, 451.0], [76.8, 451.0], [76.9, 451.0], [77.0, 451.0], [77.1, 451.0], [77.2, 451.0], [77.3, 451.0], [77.4, 451.0], [77.5, 453.0], [77.6, 453.0], [77.7, 453.0], [77.8, 453.0], [77.9, 453.0], [78.0, 453.0], [78.1, 453.0], [78.2, 453.0], [78.3, 453.0], [78.4, 454.0], [78.5, 454.0], [78.6, 454.0], [78.7, 454.0], [78.8, 454.0], [78.9, 454.0], [79.0, 454.0], [79.1, 454.0], [79.2, 455.0], [79.3, 455.0], [79.4, 455.0], [79.5, 455.0], [79.6, 455.0], [79.7, 455.0], [79.8, 455.0], [79.9, 455.0], [80.0, 457.0], [80.1, 457.0], [80.2, 457.0], [80.3, 457.0], [80.4, 457.0], [80.5, 457.0], [80.6, 457.0], [80.7, 457.0], [80.8, 457.0], [80.9, 460.0], [81.0, 460.0], [81.1, 460.0], [81.2, 460.0], [81.3, 460.0], [81.4, 460.0], [81.5, 460.0], [81.6, 460.0], [81.7, 464.0], [81.8, 464.0], [81.9, 464.0], [82.0, 464.0], [82.1, 464.0], [82.2, 464.0], [82.3, 464.0], [82.4, 464.0], [82.5, 465.0], [82.6, 465.0], [82.7, 465.0], [82.8, 465.0], [82.9, 465.0], [83.0, 465.0], [83.1, 465.0], [83.2, 465.0], [83.3, 465.0], [83.4, 467.0], [83.5, 467.0], [83.6, 467.0], [83.7, 467.0], [83.8, 467.0], [83.9, 467.0], [84.0, 467.0], [84.1, 467.0], [84.2, 483.0], [84.3, 483.0], [84.4, 483.0], [84.5, 483.0], [84.6, 483.0], [84.7, 483.0], [84.8, 483.0], [84.9, 483.0], [85.0, 488.0], [85.1, 488.0], [85.2, 488.0], [85.3, 488.0], [85.4, 488.0], [85.5, 488.0], [85.6, 488.0], [85.7, 488.0], [85.8, 488.0], [85.9, 488.0], [86.0, 488.0], [86.1, 488.0], [86.2, 488.0], [86.3, 488.0], [86.4, 488.0], [86.5, 488.0], [86.6, 488.0], [86.7, 489.0], [86.8, 489.0], [86.9, 489.0], [87.0, 489.0], [87.1, 489.0], [87.2, 489.0], [87.3, 489.0], [87.4, 489.0], [87.5, 489.0], [87.6, 489.0], [87.7, 489.0], [87.8, 489.0], [87.9, 489.0], [88.0, 489.0], [88.1, 489.0], [88.2, 489.0], [88.3, 489.0], [88.4, 492.0], [88.5, 492.0], [88.6, 492.0], [88.7, 492.0], [88.8, 492.0], [88.9, 492.0], [89.0, 492.0], [89.1, 492.0], [89.2, 500.0], [89.3, 500.0], [89.4, 500.0], [89.5, 500.0], [89.6, 500.0], [89.7, 500.0], [89.8, 500.0], [89.9, 500.0], [90.0, 503.0], [90.1, 503.0], [90.2, 503.0], [90.3, 503.0], [90.4, 503.0], [90.5, 503.0], [90.6, 503.0], [90.7, 503.0], [90.8, 503.0], [90.9, 505.0], [91.0, 505.0], [91.1, 505.0], [91.2, 505.0], [91.3, 505.0], [91.4, 505.0], [91.5, 505.0], [91.6, 505.0], [91.7, 505.0], [91.8, 505.0], [91.9, 505.0], [92.0, 505.0], [92.1, 505.0], [92.2, 505.0], [92.3, 505.0], [92.4, 505.0], [92.5, 507.0], [92.6, 507.0], [92.7, 507.0], [92.8, 507.0], [92.9, 507.0], [93.0, 507.0], [93.1, 507.0], [93.2, 507.0], [93.3, 507.0], [93.4, 514.0], [93.5, 514.0], [93.6, 514.0], [93.7, 514.0], [93.8, 514.0], [93.9, 514.0], [94.0, 514.0], [94.1, 514.0], [94.2, 516.0], [94.3, 516.0], [94.4, 516.0], [94.5, 516.0], [94.6, 516.0], [94.7, 516.0], [94.8, 516.0], [94.9, 516.0], [95.0, 516.0], [95.1, 516.0], [95.2, 516.0], [95.3, 516.0], [95.4, 516.0], [95.5, 516.0], [95.6, 516.0], [95.7, 516.0], [95.8, 516.0], [95.9, 517.0], [96.0, 517.0], [96.1, 517.0], [96.2, 517.0], [96.3, 517.0], [96.4, 517.0], [96.5, 517.0], [96.6, 517.0], [96.7, 535.0], [96.8, 535.0], [96.9, 535.0], [97.0, 535.0], [97.1, 535.0], [97.2, 535.0], [97.3, 535.0], [97.4, 535.0], [97.5, 556.0], [97.6, 556.0], [97.7, 556.0], [97.8, 556.0], [97.9, 556.0], [98.0, 556.0], [98.1, 556.0], [98.2, 556.0], [98.3, 556.0], [98.4, 565.0], [98.5, 565.0], [98.6, 565.0], [98.7, 565.0], [98.8, 565.0], [98.9, 565.0], [99.0, 565.0], [99.1, 565.0], [99.2, 628.0], [99.3, 628.0], [99.4, 628.0], [99.5, 628.0], [99.6, 628.0], [99.7, 628.0], [99.8, 628.0], [99.9, 628.0]], "isOverall": false, "label": "Configuration №3 HTTP Request", "isController": false}, {"data": [[0.0, 519.0], [0.1, 519.0], [0.2, 519.0], [0.3, 519.0], [0.4, 519.0], [0.5, 519.0], [0.6, 519.0], [0.7, 519.0], [0.8, 519.0], [0.9, 521.0], [1.0, 521.0], [1.1, 521.0], [1.2, 521.0], [1.3, 521.0], [1.4, 521.0], [1.5, 521.0], [1.6, 521.0], [1.7, 524.0], [1.8, 524.0], [1.9, 524.0], [2.0, 524.0], [2.1, 524.0], [2.2, 524.0], [2.3, 524.0], [2.4, 524.0], [2.5, 527.0], [2.6, 527.0], [2.7, 527.0], [2.8, 527.0], [2.9, 527.0], [3.0, 527.0], [3.1, 527.0], [3.2, 527.0], [3.3, 527.0], [3.4, 527.0], [3.5, 527.0], [3.6, 527.0], [3.7, 527.0], [3.8, 527.0], [3.9, 527.0], [4.0, 527.0], [4.1, 527.0], [4.2, 528.0], [4.3, 528.0], [4.4, 528.0], [4.5, 528.0], [4.6, 528.0], [4.7, 528.0], [4.8, 528.0], [4.9, 528.0], [5.0, 528.0], [5.1, 528.0], [5.2, 528.0], [5.3, 528.0], [5.4, 528.0], [5.5, 528.0], [5.6, 528.0], [5.7, 528.0], [5.8, 528.0], [5.9, 529.0], [6.0, 529.0], [6.1, 529.0], [6.2, 529.0], [6.3, 529.0], [6.4, 529.0], [6.5, 529.0], [6.6, 529.0], [6.7, 530.0], [6.8, 530.0], [6.9, 530.0], [7.0, 530.0], [7.1, 530.0], [7.2, 530.0], [7.3, 530.0], [7.4, 530.0], [7.5, 531.0], [7.6, 531.0], [7.7, 531.0], [7.8, 531.0], [7.9, 531.0], [8.0, 531.0], [8.1, 531.0], [8.2, 531.0], [8.3, 531.0], [8.4, 531.0], [8.5, 531.0], [8.6, 531.0], [8.7, 531.0], [8.8, 531.0], [8.9, 531.0], [9.0, 531.0], [9.1, 531.0], [9.2, 533.0], [9.3, 533.0], [9.4, 533.0], [9.5, 533.0], [9.6, 533.0], [9.7, 533.0], [9.8, 533.0], [9.9, 533.0], [10.0, 534.0], [10.1, 534.0], [10.2, 534.0], [10.3, 534.0], [10.4, 534.0], [10.5, 534.0], [10.6, 534.0], [10.7, 534.0], [10.8, 534.0], [10.9, 535.0], [11.0, 535.0], [11.1, 535.0], [11.2, 535.0], [11.3, 535.0], [11.4, 535.0], [11.5, 535.0], [11.6, 535.0], [11.7, 535.0], [11.8, 535.0], [11.9, 535.0], [12.0, 535.0], [12.1, 535.0], [12.2, 535.0], [12.3, 535.0], [12.4, 535.0], [12.5, 537.0], [12.6, 537.0], [12.7, 537.0], [12.8, 537.0], [12.9, 537.0], [13.0, 537.0], [13.1, 537.0], [13.2, 537.0], [13.3, 537.0], [13.4, 538.0], [13.5, 538.0], [13.6, 538.0], [13.7, 538.0], [13.8, 538.0], [13.9, 538.0], [14.0, 538.0], [14.1, 538.0], [14.2, 538.0], [14.3, 538.0], [14.4, 538.0], [14.5, 538.0], [14.6, 538.0], [14.7, 538.0], [14.8, 538.0], [14.9, 538.0], [15.0, 539.0], [15.1, 539.0], [15.2, 539.0], [15.3, 539.0], [15.4, 539.0], [15.5, 539.0], [15.6, 539.0], [15.7, 539.0], [15.8, 539.0], [15.9, 540.0], [16.0, 540.0], [16.1, 540.0], [16.2, 540.0], [16.3, 540.0], [16.4, 540.0], [16.5, 540.0], [16.6, 540.0], [16.7, 540.0], [16.8, 540.0], [16.9, 540.0], [17.0, 540.0], [17.1, 540.0], [17.2, 540.0], [17.3, 540.0], [17.4, 540.0], [17.5, 540.0], [17.6, 540.0], [17.7, 540.0], [17.8, 540.0], [17.9, 540.0], [18.0, 540.0], [18.1, 540.0], [18.2, 540.0], [18.3, 540.0], [18.4, 540.0], [18.5, 540.0], [18.6, 540.0], [18.7, 540.0], [18.8, 540.0], [18.9, 540.0], [19.0, 540.0], [19.1, 540.0], [19.2, 541.0], [19.3, 541.0], [19.4, 541.0], [19.5, 541.0], [19.6, 541.0], [19.7, 541.0], [19.8, 541.0], [19.9, 541.0], [20.0, 541.0], [20.1, 541.0], [20.2, 541.0], [20.3, 541.0], [20.4, 541.0], [20.5, 541.0], [20.6, 541.0], [20.7, 541.0], [20.8, 541.0], [20.9, 541.0], [21.0, 541.0], [21.1, 541.0], [21.2, 541.0], [21.3, 541.0], [21.4, 541.0], [21.5, 541.0], [21.6, 541.0], [21.7, 541.0], [21.8, 541.0], [21.9, 541.0], [22.0, 541.0], [22.1, 541.0], [22.2, 541.0], [22.3, 541.0], [22.4, 541.0], [22.5, 542.0], [22.6, 542.0], [22.7, 542.0], [22.8, 542.0], [22.9, 542.0], [23.0, 542.0], [23.1, 542.0], [23.2, 542.0], [23.3, 542.0], [23.4, 542.0], [23.5, 542.0], [23.6, 542.0], [23.7, 542.0], [23.8, 542.0], [23.9, 542.0], [24.0, 542.0], [24.1, 542.0], [24.2, 542.0], [24.3, 542.0], [24.4, 542.0], [24.5, 542.0], [24.6, 542.0], [24.7, 542.0], [24.8, 542.0], [24.9, 542.0], [25.0, 543.0], [25.1, 543.0], [25.2, 543.0], [25.3, 543.0], [25.4, 543.0], [25.5, 543.0], [25.6, 543.0], [25.7, 543.0], [25.8, 543.0], [25.9, 544.0], [26.0, 544.0], [26.1, 544.0], [26.2, 544.0], [26.3, 544.0], [26.4, 544.0], [26.5, 544.0], [26.6, 544.0], [26.7, 548.0], [26.8, 548.0], [26.9, 548.0], [27.0, 548.0], [27.1, 548.0], [27.2, 548.0], [27.3, 548.0], [27.4, 548.0], [27.5, 549.0], [27.6, 549.0], [27.7, 549.0], [27.8, 549.0], [27.9, 549.0], [28.0, 549.0], [28.1, 549.0], [28.2, 549.0], [28.3, 549.0], [28.4, 549.0], [28.5, 549.0], [28.6, 549.0], [28.7, 549.0], [28.8, 549.0], [28.9, 549.0], [29.0, 549.0], [29.1, 549.0], [29.2, 550.0], [29.3, 550.0], [29.4, 550.0], [29.5, 550.0], [29.6, 550.0], [29.7, 550.0], [29.8, 550.0], [29.9, 550.0], [30.0, 550.0], [30.1, 550.0], [30.2, 550.0], [30.3, 550.0], [30.4, 550.0], [30.5, 550.0], [30.6, 550.0], [30.7, 550.0], [30.8, 550.0], [30.9, 550.0], [31.0, 550.0], [31.1, 550.0], [31.2, 550.0], [31.3, 550.0], [31.4, 550.0], [31.5, 550.0], [31.6, 550.0], [31.7, 551.0], [31.8, 551.0], [31.9, 551.0], [32.0, 551.0], [32.1, 551.0], [32.2, 551.0], [32.3, 551.0], [32.4, 551.0], [32.5, 551.0], [32.6, 551.0], [32.7, 551.0], [32.8, 551.0], [32.9, 551.0], [33.0, 551.0], [33.1, 551.0], [33.2, 551.0], [33.3, 551.0], [33.4, 551.0], [33.5, 551.0], [33.6, 551.0], [33.7, 551.0], [33.8, 551.0], [33.9, 551.0], [34.0, 551.0], [34.1, 551.0], [34.2, 551.0], [34.3, 551.0], [34.4, 551.0], [34.5, 551.0], [34.6, 551.0], [34.7, 551.0], [34.8, 551.0], [34.9, 551.0], [35.0, 552.0], [35.1, 552.0], [35.2, 552.0], [35.3, 552.0], [35.4, 552.0], [35.5, 552.0], [35.6, 552.0], [35.7, 552.0], [35.8, 552.0], [35.9, 552.0], [36.0, 552.0], [36.1, 552.0], [36.2, 552.0], [36.3, 552.0], [36.4, 552.0], [36.5, 552.0], [36.6, 552.0], [36.7, 553.0], [36.8, 553.0], [36.9, 553.0], [37.0, 553.0], [37.1, 553.0], [37.2, 553.0], [37.3, 553.0], [37.4, 553.0], [37.5, 553.0], [37.6, 553.0], [37.7, 553.0], [37.8, 553.0], [37.9, 553.0], [38.0, 553.0], [38.1, 553.0], [38.2, 553.0], [38.3, 553.0], [38.4, 553.0], [38.5, 553.0], [38.6, 553.0], [38.7, 553.0], [38.8, 553.0], [38.9, 553.0], [39.0, 553.0], [39.1, 553.0], [39.2, 554.0], [39.3, 554.0], [39.4, 554.0], [39.5, 554.0], [39.6, 554.0], [39.7, 554.0], [39.8, 554.0], [39.9, 554.0], [40.0, 554.0], [40.1, 554.0], [40.2, 554.0], [40.3, 554.0], [40.4, 554.0], [40.5, 554.0], [40.6, 554.0], [40.7, 554.0], [40.8, 554.0], [40.9, 554.0], [41.0, 554.0], [41.1, 554.0], [41.2, 554.0], [41.3, 554.0], [41.4, 554.0], [41.5, 554.0], [41.6, 554.0], [41.7, 554.0], [41.8, 554.0], [41.9, 554.0], [42.0, 554.0], [42.1, 554.0], [42.2, 554.0], [42.3, 554.0], [42.4, 554.0], [42.5, 554.0], [42.6, 554.0], [42.7, 554.0], [42.8, 554.0], [42.9, 554.0], [43.0, 554.0], [43.1, 554.0], [43.2, 554.0], [43.3, 554.0], [43.4, 554.0], [43.5, 554.0], [43.6, 554.0], [43.7, 554.0], [43.8, 554.0], [43.9, 554.0], [44.0, 554.0], [44.1, 554.0], [44.2, 555.0], [44.3, 555.0], [44.4, 555.0], [44.5, 555.0], [44.6, 555.0], [44.7, 555.0], [44.8, 555.0], [44.9, 555.0], [45.0, 555.0], [45.1, 555.0], [45.2, 555.0], [45.3, 555.0], [45.4, 555.0], [45.5, 555.0], [45.6, 555.0], [45.7, 555.0], [45.8, 555.0], [45.9, 555.0], [46.0, 555.0], [46.1, 555.0], [46.2, 555.0], [46.3, 555.0], [46.4, 555.0], [46.5, 555.0], [46.6, 555.0], [46.7, 555.0], [46.8, 555.0], [46.9, 555.0], [47.0, 555.0], [47.1, 555.0], [47.2, 555.0], [47.3, 555.0], [47.4, 555.0], [47.5, 556.0], [47.6, 556.0], [47.7, 556.0], [47.8, 556.0], [47.9, 556.0], [48.0, 556.0], [48.1, 556.0], [48.2, 556.0], [48.3, 556.0], [48.4, 558.0], [48.5, 558.0], [48.6, 558.0], [48.7, 558.0], [48.8, 558.0], [48.9, 558.0], [49.0, 558.0], [49.1, 558.0], [49.2, 559.0], [49.3, 559.0], [49.4, 559.0], [49.5, 559.0], [49.6, 559.0], [49.7, 559.0], [49.8, 559.0], [49.9, 559.0], [50.0, 559.0], [50.1, 560.0], [50.2, 560.0], [50.3, 560.0], [50.4, 560.0], [50.5, 560.0], [50.6, 560.0], [50.7, 560.0], [50.8, 560.0], [50.9, 560.0], [51.0, 560.0], [51.1, 560.0], [51.2, 560.0], [51.3, 560.0], [51.4, 560.0], [51.5, 560.0], [51.6, 560.0], [51.7, 561.0], [51.8, 561.0], [51.9, 561.0], [52.0, 561.0], [52.1, 561.0], [52.2, 561.0], [52.3, 561.0], [52.4, 561.0], [52.5, 561.0], [52.6, 561.0], [52.7, 561.0], [52.8, 561.0], [52.9, 561.0], [53.0, 561.0], [53.1, 561.0], [53.2, 561.0], [53.3, 561.0], [53.4, 562.0], [53.5, 562.0], [53.6, 562.0], [53.7, 562.0], [53.8, 562.0], [53.9, 562.0], [54.0, 562.0], [54.1, 562.0], [54.2, 563.0], [54.3, 563.0], [54.4, 563.0], [54.5, 563.0], [54.6, 563.0], [54.7, 563.0], [54.8, 563.0], [54.9, 563.0], [55.0, 563.0], [55.1, 563.0], [55.2, 563.0], [55.3, 563.0], [55.4, 563.0], [55.5, 563.0], [55.6, 563.0], [55.7, 563.0], [55.8, 563.0], [55.9, 564.0], [56.0, 564.0], [56.1, 564.0], [56.2, 564.0], [56.3, 564.0], [56.4, 564.0], [56.5, 564.0], [56.6, 564.0], [56.7, 564.0], [56.8, 564.0], [56.9, 564.0], [57.0, 564.0], [57.1, 564.0], [57.2, 564.0], [57.3, 564.0], [57.4, 564.0], [57.5, 564.0], [57.6, 564.0], [57.7, 564.0], [57.8, 564.0], [57.9, 564.0], [58.0, 564.0], [58.1, 564.0], [58.2, 564.0], [58.3, 564.0], [58.4, 565.0], [58.5, 565.0], [58.6, 565.0], [58.7, 565.0], [58.8, 565.0], [58.9, 565.0], [59.0, 565.0], [59.1, 565.0], [59.2, 565.0], [59.3, 565.0], [59.4, 565.0], [59.5, 565.0], [59.6, 565.0], [59.7, 565.0], [59.8, 565.0], [59.9, 565.0], [60.0, 565.0], [60.1, 565.0], [60.2, 565.0], [60.3, 565.0], [60.4, 565.0], [60.5, 565.0], [60.6, 565.0], [60.7, 565.0], [60.8, 565.0], [60.9, 565.0], [61.0, 565.0], [61.1, 565.0], [61.2, 565.0], [61.3, 565.0], [61.4, 565.0], [61.5, 565.0], [61.6, 565.0], [61.7, 565.0], [61.8, 565.0], [61.9, 565.0], [62.0, 565.0], [62.1, 565.0], [62.2, 565.0], [62.3, 565.0], [62.4, 565.0], [62.5, 566.0], [62.6, 566.0], [62.7, 566.0], [62.8, 566.0], [62.9, 566.0], [63.0, 566.0], [63.1, 566.0], [63.2, 566.0], [63.3, 566.0], [63.4, 568.0], [63.5, 568.0], [63.6, 568.0], [63.7, 568.0], [63.8, 568.0], [63.9, 568.0], [64.0, 568.0], [64.1, 568.0], [64.2, 569.0], [64.3, 569.0], [64.4, 569.0], [64.5, 569.0], [64.6, 569.0], [64.7, 569.0], [64.8, 569.0], [64.9, 569.0], [65.0, 571.0], [65.1, 571.0], [65.2, 571.0], [65.3, 571.0], [65.4, 571.0], [65.5, 571.0], [65.6, 571.0], [65.7, 571.0], [65.8, 571.0], [65.9, 571.0], [66.0, 571.0], [66.1, 571.0], [66.2, 571.0], [66.3, 571.0], [66.4, 571.0], [66.5, 571.0], [66.6, 571.0], [66.7, 572.0], [66.8, 572.0], [66.9, 572.0], [67.0, 572.0], [67.1, 572.0], [67.2, 572.0], [67.3, 572.0], [67.4, 572.0], [67.5, 573.0], [67.6, 573.0], [67.7, 573.0], [67.8, 573.0], [67.9, 573.0], [68.0, 573.0], [68.1, 573.0], [68.2, 573.0], [68.3, 573.0], [68.4, 573.0], [68.5, 573.0], [68.6, 573.0], [68.7, 573.0], [68.8, 573.0], [68.9, 573.0], [69.0, 573.0], [69.1, 573.0], [69.2, 574.0], [69.3, 574.0], [69.4, 574.0], [69.5, 574.0], [69.6, 574.0], [69.7, 574.0], [69.8, 574.0], [69.9, 574.0], [70.0, 574.0], [70.1, 574.0], [70.2, 574.0], [70.3, 574.0], [70.4, 574.0], [70.5, 574.0], [70.6, 574.0], [70.7, 574.0], [70.8, 574.0], [70.9, 575.0], [71.0, 575.0], [71.1, 575.0], [71.2, 575.0], [71.3, 575.0], [71.4, 575.0], [71.5, 575.0], [71.6, 575.0], [71.7, 577.0], [71.8, 577.0], [71.9, 577.0], [72.0, 577.0], [72.1, 577.0], [72.2, 577.0], [72.3, 577.0], [72.4, 577.0], [72.5, 581.0], [72.6, 581.0], [72.7, 581.0], [72.8, 581.0], [72.9, 581.0], [73.0, 581.0], [73.1, 581.0], [73.2, 581.0], [73.3, 581.0], [73.4, 584.0], [73.5, 584.0], [73.6, 584.0], [73.7, 584.0], [73.8, 584.0], [73.9, 584.0], [74.0, 584.0], [74.1, 584.0], [74.2, 586.0], [74.3, 586.0], [74.4, 586.0], [74.5, 586.0], [74.6, 586.0], [74.7, 586.0], [74.8, 586.0], [74.9, 586.0], [75.0, 589.0], [75.1, 589.0], [75.2, 589.0], [75.3, 589.0], [75.4, 589.0], [75.5, 589.0], [75.6, 589.0], [75.7, 589.0], [75.8, 589.0], [75.9, 591.0], [76.0, 591.0], [76.1, 591.0], [76.2, 591.0], [76.3, 591.0], [76.4, 591.0], [76.5, 591.0], [76.6, 591.0], [76.7, 593.0], [76.8, 593.0], [76.9, 593.0], [77.0, 593.0], [77.1, 593.0], [77.2, 593.0], [77.3, 593.0], [77.4, 593.0], [77.5, 594.0], [77.6, 594.0], [77.7, 594.0], [77.8, 594.0], [77.9, 594.0], [78.0, 594.0], [78.1, 594.0], [78.2, 594.0], [78.3, 594.0], [78.4, 595.0], [78.5, 595.0], [78.6, 595.0], [78.7, 595.0], [78.8, 595.0], [78.9, 595.0], [79.0, 595.0], [79.1, 595.0], [79.2, 596.0], [79.3, 596.0], [79.4, 596.0], [79.5, 596.0], [79.6, 596.0], [79.7, 596.0], [79.8, 596.0], [79.9, 596.0], [80.0, 598.0], [80.1, 598.0], [80.2, 598.0], [80.3, 598.0], [80.4, 598.0], [80.5, 598.0], [80.6, 598.0], [80.7, 598.0], [80.8, 598.0], [80.9, 600.0], [81.0, 600.0], [81.1, 600.0], [81.2, 600.0], [81.3, 600.0], [81.4, 600.0], [81.5, 600.0], [81.6, 600.0], [81.7, 601.0], [81.8, 601.0], [81.9, 601.0], [82.0, 601.0], [82.1, 601.0], [82.2, 601.0], [82.3, 601.0], [82.4, 601.0], [82.5, 603.0], [82.6, 603.0], [82.7, 603.0], [82.8, 603.0], [82.9, 603.0], [83.0, 603.0], [83.1, 603.0], [83.2, 603.0], [83.3, 603.0], [83.4, 604.0], [83.5, 604.0], [83.6, 604.0], [83.7, 604.0], [83.8, 604.0], [83.9, 604.0], [84.0, 604.0], [84.1, 604.0], [84.2, 604.0], [84.3, 604.0], [84.4, 604.0], [84.5, 604.0], [84.6, 604.0], [84.7, 604.0], [84.8, 604.0], [84.9, 604.0], [85.0, 618.0], [85.1, 618.0], [85.2, 618.0], [85.3, 618.0], [85.4, 618.0], [85.5, 618.0], [85.6, 618.0], [85.7, 618.0], [85.8, 618.0], [85.9, 624.0], [86.0, 624.0], [86.1, 624.0], [86.2, 624.0], [86.3, 624.0], [86.4, 624.0], [86.5, 624.0], [86.6, 624.0], [86.7, 629.0], [86.8, 629.0], [86.9, 629.0], [87.0, 629.0], [87.1, 629.0], [87.2, 629.0], [87.3, 629.0], [87.4, 629.0], [87.5, 632.0], [87.6, 632.0], [87.7, 632.0], [87.8, 632.0], [87.9, 632.0], [88.0, 632.0], [88.1, 632.0], [88.2, 632.0], [88.3, 632.0], [88.4, 634.0], [88.5, 634.0], [88.6, 634.0], [88.7, 634.0], [88.8, 634.0], [88.9, 634.0], [89.0, 634.0], [89.1, 634.0], [89.2, 636.0], [89.3, 636.0], [89.4, 636.0], [89.5, 636.0], [89.6, 636.0], [89.7, 636.0], [89.8, 636.0], [89.9, 636.0], [90.0, 647.0], [90.1, 647.0], [90.2, 647.0], [90.3, 647.0], [90.4, 647.0], [90.5, 647.0], [90.6, 647.0], [90.7, 647.0], [90.8, 647.0], [90.9, 649.0], [91.0, 649.0], [91.1, 649.0], [91.2, 649.0], [91.3, 649.0], [91.4, 649.0], [91.5, 649.0], [91.6, 649.0], [91.7, 658.0], [91.8, 658.0], [91.9, 658.0], [92.0, 658.0], [92.1, 658.0], [92.2, 658.0], [92.3, 658.0], [92.4, 658.0], [92.5, 659.0], [92.6, 659.0], [92.7, 659.0], [92.8, 659.0], [92.9, 659.0], [93.0, 659.0], [93.1, 659.0], [93.2, 659.0], [93.3, 659.0], [93.4, 665.0], [93.5, 665.0], [93.6, 665.0], [93.7, 665.0], [93.8, 665.0], [93.9, 665.0], [94.0, 665.0], [94.1, 665.0], [94.2, 665.0], [94.3, 665.0], [94.4, 665.0], [94.5, 665.0], [94.6, 665.0], [94.7, 665.0], [94.8, 665.0], [94.9, 665.0], [95.0, 678.0], [95.1, 678.0], [95.2, 678.0], [95.3, 678.0], [95.4, 678.0], [95.5, 678.0], [95.6, 678.0], [95.7, 678.0], [95.8, 678.0], [95.9, 699.0], [96.0, 699.0], [96.1, 699.0], [96.2, 699.0], [96.3, 699.0], [96.4, 699.0], [96.5, 699.0], [96.6, 699.0], [96.7, 705.0], [96.8, 705.0], [96.9, 705.0], [97.0, 705.0], [97.1, 705.0], [97.2, 705.0], [97.3, 705.0], [97.4, 705.0], [97.5, 708.0], [97.6, 708.0], [97.7, 708.0], [97.8, 708.0], [97.9, 708.0], [98.0, 708.0], [98.1, 708.0], [98.2, 708.0], [98.3, 708.0], [98.4, 712.0], [98.5, 712.0], [98.6, 712.0], [98.7, 712.0], [98.8, 712.0], [98.9, 712.0], [99.0, 712.0], [99.1, 712.0], [99.2, 730.0], [99.3, 730.0], [99.4, 730.0], [99.5, 730.0], [99.6, 730.0], [99.7, 730.0], [99.8, 730.0], [99.9, 730.0]], "isOverall": false, "label": "Configuration №2 HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 97.0, "series": [{"data": [[700.0, 93.0], [800.0, 26.0], [900.0, 1.0]], "isOverall": false, "label": "Configuration №1 HTTP Request", "isController": false}, {"data": [[300.0, 67.0], [600.0, 1.0], [400.0, 40.0], [500.0, 12.0]], "isOverall": false, "label": "Configuration №3 HTTP Request", "isController": false}, {"data": [[600.0, 19.0], [700.0, 4.0], [500.0, 97.0]], "isOverall": false, "label": "Configuration №2 HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 249.0, "series": [{"data": [[0.0, 108.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 249.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 3.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.8461538461538463, "minX": 1.71596952E12, "maxY": 4.599999999999998, "series": [{"data": [[1.71596964E12, 1.8461538461538463], [1.71596958E12, 4.577777777777776], [1.71596952E12, 2.1176470588235294]], "isOverall": false, "label": "Configuration №1 Users", "isController": false}, {"data": [[1.71596964E12, 1.8461538461538463], [1.71596958E12, 4.588888888888887], [1.71596952E12, 2.1176470588235294]], "isOverall": false, "label": "Configuration №3 Users", "isController": false}, {"data": [[1.71596964E12, 1.8461538461538463], [1.71596958E12, 4.599999999999998], [1.71596952E12, 2.1176470588235294]], "isOverall": false, "label": "Configuration №2 Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71596964E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 354.25000000000006, "minX": 1.0, "maxY": 794.9062500000001, "series": [{"data": [[16.0, 758.5], [4.0, 731.0], [1.0, 738.0], [9.0, 770.5999999999999], [18.0, 782.5714285714286], [10.0, 754.0], [3.0, 753.0000000000001], [6.0, 753.8461538461539], [12.0, 767.2592592592592], [13.0, 753.0], [7.0, 751.0], [15.0, 794.9062500000001]], "isOverall": false, "label": "Configuration №1 HTTP Request", "isController": false}, {"data": [[11.683333333333334, 773.6333333333332]], "isOverall": false, "label": "Configuration №1 HTTP Request-Aggregated", "isController": false}, {"data": [[9.0, 402.70000000000005], [18.0, 426.81249999999994], [3.0, 354.25000000000006], [6.0, 382.5], [12.0, 405.4285714285715], [14.0, 565.0], [15.0, 417.2121212121211]], "isOverall": false, "label": "Configuration №3 HTTP Request", "isController": false}, {"data": [[11.841666666666667, 406.3083333333333]], "isOverall": false, "label": "Configuration №3 HTTP Request-Aggregated", "isController": false}, {"data": [[8.0, 540.0], [2.0, 528.0], [17.0, 556.5], [9.0, 569.1052631578948], [18.0, 598.1428571428571], [5.0, 533.0], [11.0, 574.5], [3.0, 558.2857142857143], [6.0, 547.153846153846], [12.0, 559.8846153846155], [14.0, 565.0], [15.0, 594.3749999999999]], "isOverall": false, "label": "Configuration №2 HTTP Request", "isController": false}, {"data": [[11.775000000000006, 573.1499999999997]], "isOverall": false, "label": "Configuration №2 HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 18.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 102.7, "minX": 1.71596952E12, "maxY": 1039.5, "series": [{"data": [[1.71596964E12, 150.15], [1.71596958E12, 1039.5], [1.71596952E12, 196.35]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71596964E12, 102.7], [1.71596958E12, 711.0], [1.71596952E12, 134.3]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71596964E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 380.94117647058823, "minX": 1.71596952E12, "maxY": 779.5444444444445, "series": [{"data": [[1.71596964E12, 769.7692307692308], [1.71596958E12, 779.5444444444445], [1.71596952E12, 745.2941176470588]], "isOverall": false, "label": "Configuration №1 HTTP Request", "isController": false}, {"data": [[1.71596964E12, 385.07692307692304], [1.71596958E12, 414.16666666666674], [1.71596952E12, 380.94117647058823]], "isOverall": false, "label": "Configuration №3 HTTP Request", "isController": false}, {"data": [[1.71596964E12, 544.3076923076923], [1.71596958E12, 581.2444444444442], [1.71596952E12, 552.3529411764706]], "isOverall": false, "label": "Configuration №2 HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71596964E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 380.52941176470586, "minX": 1.71596952E12, "maxY": 779.4777777777779, "series": [{"data": [[1.71596964E12, 769.6923076923077], [1.71596958E12, 779.4777777777779], [1.71596952E12, 745.2352941176472]], "isOverall": false, "label": "Configuration №1 HTTP Request", "isController": false}, {"data": [[1.71596964E12, 385.0], [1.71596958E12, 414.0666666666669], [1.71596952E12, 380.52941176470586]], "isOverall": false, "label": "Configuration №3 HTTP Request", "isController": false}, {"data": [[1.71596964E12, 544.2307692307692], [1.71596958E12, 581.2111111111109], [1.71596952E12, 552.3529411764706]], "isOverall": false, "label": "Configuration №2 HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71596964E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.71596952E12, "maxY": 0.7058823529411765, "series": [{"data": [[1.71596964E12, 0.0], [1.71596958E12, 0.05555555555555554], [1.71596952E12, 0.7058823529411765]], "isOverall": false, "label": "Configuration №1 HTTP Request", "isController": false}, {"data": [[1.71596964E12, 0.0], [1.71596958E12, 0.0666666666666667], [1.71596952E12, 0.7058823529411765]], "isOverall": false, "label": "Configuration №3 HTTP Request", "isController": false}, {"data": [[1.71596964E12, 0.0], [1.71596958E12, 0.05555555555555554], [1.71596952E12, 0.7058823529411765]], "isOverall": false, "label": "Configuration №2 HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71596964E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 317.0, "minX": 1.71596952E12, "maxY": 868.0, "series": [{"data": [[1.71596964E12, 857.0], [1.71596958E12, 868.0], [1.71596952E12, 824.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71596964E12, 327.0], [1.71596958E12, 336.0], [1.71596952E12, 317.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71596964E12, 759.9000000000001], [1.71596958E12, 785.0999999999999], [1.71596952E12, 741.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71596964E12, 857.0], [1.71596958E12, 856.31], [1.71596952E12, 824.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71596964E12, 539.5], [1.71596958E12, 564.5], [1.71596952E12, 541.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71596964E12, 793.3499999999998], [1.71596958E12, 822.55], [1.71596952E12, 798.1999999999999]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71596964E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 550.0, "minX": 3.0, "maxY": 913.0, "series": [{"data": [[3.0, 550.0], [6.0, 565.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[6.0, 883.0], [3.0, 913.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 550.0, "minX": 3.0, "maxY": 913.0, "series": [{"data": [[3.0, 550.0], [6.0, 564.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[6.0, 883.0], [3.0, 913.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.6, "minX": 1.71596952E12, "maxY": 4.5, "series": [{"data": [[1.71596964E12, 0.6], [1.71596958E12, 4.5], [1.71596952E12, 0.9]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71596964E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.65, "minX": 1.71596952E12, "maxY": 4.5, "series": [{"data": [[1.71596964E12, 0.65], [1.71596958E12, 4.5], [1.71596952E12, 0.85]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71596964E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71596952E12, "maxY": 1.5, "series": [{"data": [[1.71596964E12, 0.016666666666666666], [1.71596958E12, 0.03333333333333333]], "isOverall": false, "label": "Configuration №1 HTTP Request-failure", "isController": false}, {"data": [[1.71596964E12, 0.21666666666666667], [1.71596958E12, 1.5], [1.71596952E12, 0.2833333333333333]], "isOverall": false, "label": "Configuration №3 HTTP Request-success", "isController": false}, {"data": [[1.71596964E12, 0.2], [1.71596958E12, 1.4666666666666666], [1.71596952E12, 0.2833333333333333]], "isOverall": false, "label": "Configuration №1 HTTP Request-success", "isController": false}, {"data": [[1.71596964E12, 0.21666666666666667], [1.71596958E12, 1.5], [1.71596952E12, 0.2833333333333333]], "isOverall": false, "label": "Configuration №2 HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71596964E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71596952E12, "maxY": 4.466666666666667, "series": [{"data": [[1.71596964E12, 0.6333333333333333], [1.71596958E12, 4.466666666666667], [1.71596952E12, 0.85]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71596964E12, 0.016666666666666666], [1.71596958E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71596964E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

