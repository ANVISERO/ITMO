openapi: 3.0.3
info:
  title: Movie service REST endpoints
  description: Movie service REST endpoints for SOA Lab1
  version: 1.0.0
servers:
  - url: 'https://localhost:8080/api/v1'
paths:
  /movies:
    post:
      summary: Add new movie
      description: Add new movie
      operationId: addMovie
      tags:
        - Base movie operations
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/Movie"
      responses:
        '201':
          description: Returns the movie that was just added
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/MovieResponse"
        '400':
          description: Bad Request
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error400"
        '404':
          description: Not Found
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error404"
        '500':
          description: Internal server error
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error500"
        default:
          description: Returns error code, message and time
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorDefault"
  /movies/{id}:
    get:
      summary: Get movie by id
      description: Get movie by id
      operationId: getMovieById
      tags:
        - Base movie operations
      parameters:
        - name: id
          in: path
          required: true
          description: Movie id to find
          schema:
            type: integer
            format: int64
            nullable: false
            minimum: 1
            example: 1
      responses:
        '200':
          description: Returns the movie by id
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/MovieResponse"
        '400':
          description: Bad Request
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error400"
        '404':
          description: Not Found
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error404"
        '500':
          description: Internal server error
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error500"
        default:
          description: Returns error code, message and time
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorDefault"
    put:
      summary: Update movie by id
      description: Update movie by id
      operationId: updateMovieById
      tags:
        - Base movie operations
      parameters:
        - name: id
          in: path
          required: true
          description: Movie id to update
          schema:
            type: integer
            format: int64
            nullable: false
            minimum: 1
            example: 1
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              $ref: "#/components/schemas/Movie"
      responses:
        '200':
          description: Returns updated movie by id
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/MovieResponse"
        '400':
          description: Bad Request
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error400"
        '404':
          description: Not Found
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error404"
        '500':
          description: Internal server error
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error500"
        default:
          description: Returns error code, message and time
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorDefault"
    delete:
      summary: Delete movie by id
      description: Delete movie by id
      operationId: deleteMovieById
      tags:
        - Base movie operations
      parameters:
        - name: id
          in: path
          required: true
          description: Movie id to delete
          schema:
            type: integer
            format: int64
            nullable: false
            minimum: 1
            example: 1
      responses:
        '204':
          description: Movie was successfully deleted by id
        '400':
          description: Bad Request
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error400"
        '404':
          description: Not Found
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error404"
        '500':
          description: Internal server error
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error500"
        default:
          description: Returns error code, message and time
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorDefault"
  /movies/search:
    get:
      summary: Get list of movies
      description: Get list of movies
      operationId: searchMovies
      tags:
        - Base movie operations
      parameters:
        - name: sort
          in: query
          description: This parameter allows you to specify which fields should be sorted in the result set. A minus sign (-) before a field name indicates descending order. For instance, "-name" would sort by name in reverse alphabetical order. If both ascending and descending orders are requested for the same field (e.g., "name" and "-name"), the server will respond with an error. You can combine multiple fields for complex sorting, like "name,-id". If no sorting is specified, the results will be unsorted.
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
              default: id
              enum:
                - id
                - name
                - coordinates.x
                - coordinates.y
                - creationDate
                - oscarsCount
                - genre
                - mpaaRating
                - screenwriter.name
                - screenwriter.birthday
                - screenwriter.height
                - screenwriter.hairColor
                - screenwriter.nationality
                - -id
                - -name
                - -coordinates.x
                - -coordinates.y
                - -creationDate
                - -oscarsCount
                - -genre
                - -mpaaRating
                - -screenwriter.name
                - -screenwriter.birthday
                - -screenwriter.height
                - -screenwriter.hairColor
                - -screenwriter.nationality
        - name: filter
          in: query
          required: false
          description: This parameter allows you to apply filters to specific fields in your query. The syntax for each filter is "field_name(method:value)". For example, "name(eq:Interstellar)" would filter movies where the name is exactly "Interstellar".
          schema:
            type: array
            items:
              type: string
              example: name[eq]=Interstellar
              pattern: '^(id|name|coordinates\.x|coordinates\.y|creationDate|oscarsCount|genre|mpaaRating|screenwriter\.name|screenwriter\.birthday|screenwriter\.height|screenwriter\.hairColor|screenwriter\.nationality)\[(eq|ne|gt|lt|gte|lte)\]=.+$'
        - name: page
          in: query
          required: false
          description: Specifies the page number for pagination. Default page number is 0.
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: pageSize
          in: query
          required: false
          description: Specifies page size for pagination. Default page size is 10.
          schema:
            type: integer
            default: 10
            minimum: 1
      responses:
        '200':
          description: Returns list of movies
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/MovieResponse"
        '400':
          description: Bad Request
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error400"
        '404':
          description: Not Found
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error404"
        '500':
          description: Internal server error
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error500"
        default:
          description: Returns error code, message and time
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorDefault"
  /movies/screemwriter/max:
    get:
      summary: Return one (any) object whose "screenwriter.height" field value is the maximum.
      description: Return one (any) object whose "screenwriter.height" field value is the maximum.
      operationId: getScreenwriterMax
      tags:
        - Additional movie operations
      responses:
        '200':
          description: Returns the movie whose "screenwriter.height" field value is the maximum
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/MovieResponse"
        '400':
          description: Bad Request
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error400"
        '404':
          description: Not Found
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error404"
        '500':
          description: Internal server error
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error500"
        default:
          description: Returns error code, message and time
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorDefault"
  /movies/search/name:
    get:
      summary: Return an array of objects whose name field value contains the specified substring.
      description: Return an array of objects whose name field value contains the specified substring.
      operationId: searchMovieByName
      tags:
        - Additional movie operations
      parameters:
        - name: name
          in: query
          required: true
          description: Specifies the name of the movie
          schema:
            type: string
            example: stel
      responses:
        '200':
          description: Return an array of objects whose name field value contains the specified substring.
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/MovieResponseList"
        '400':
          description: Bad Request
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error400"
        '404':
          description: Not Found
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error404"
        '500':
          description: Internal server error
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error500"
        default:
          description: Returns error code, message and time
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorDefault"
  /movies/search/oscars/less:
    get:
      summary: Return an array of objects whose "oscarsCount" field value is less than the specified one.
      description: Return an array of objects whose "oscarsCount" field value is less than the specified one.
      operationId: searchOscarsCountLess
      tags:
        - Additional movie operations
      parameters:
        - name: oscarsCount
          in: query
          required: true
          description: Specifies amount of Oscars
          schema:
            type: integer
            example: 4
      responses:
        '200':
          description: Return an array of objects whose "oscarsCount" field value is less than the specified one.
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/MovieResponseList"
        '400':
          description: Bad Request
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error400"
        '404':
          description: Not Found
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error404"
        '500':
          description: Internal server error
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Error500"
        default:
          description: Returns error code, message and time
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/ErrorDefault"
    
components:
  schemas:
    MovieGenre:
      type: string
      enum:
        - ACTION
        - MUSICAL
        - ADVENTURE
        - FANTASY
      nullable: true
      example: ACTION
    MpaaRating:
      type: string
      enum:
        - G
        - PG
        - R
        - NC_17
      nullable: true
      example: G
    Color:
      type: string
      enum:
        - BLACK
        - YELLOW
        - ORANGE
        - WHITE
      nullable: true
      example: BLACK
    Country:
      type: string
      enum:
        - UNITED_KINGDOM
        - FRANCE
        - SPAIN
        - INDIA
      nullable: true
      example: UNITED_KINGDOM
    Person:
      type: object
      required:
        - name
        - height
      properties:
        name:
          type: string
          nullable: false
          empty: false
          example: Andrey
        birthday:
          type: string
          format: date
          nullable: true
          example: 2024-09-13
        height:
          type: number
          format: float
          minimum: 0
          nullable: false
          example: 180
        hairColor:
          $ref: "#/components/schemas/Color"
        nationality:
          $ref: "#/components/schemas/Country"
    Coordinates:
      type: object
      required:
        - x
        - y
      properties:
        x:
          type: number
          format: double
          nullable: false
          example: 1.1
        y:
          type: integer
          format: int32
          nullable: false
          example: 2
    Movie:
      type: object
      required:
        - name
        - coordinates
        - oscarsCount
        - genre
        - mpaaRating
      properties:
        name:
          type: string
          nullable: false
          empty: false
          example: Interstellar
        coordinates:
          $ref: "#/components/schemas/Coordinates"
        oscarsCount:
          type: integer
          format: int64
          nullable: false
          minimum: 1
          example: 2
        genre:
          $ref: "#/components/schemas/MovieGenre"
        mpaaRating:
          $ref: "#/components/schemas/MpaaRating"
        screenwriter:
          $ref: "#/components/schemas/Person"
        duration:
          type: integer
          format: int64
          nullable: false
          minimum: 1
          example: 1
    MovieResponse:
      type: object
      required:
        - id
        - name
        - coordinates
        - creationDate
        - oscarsCount
        - genre
        - mpaaRating
        - screenwriter
      properties:
        id:
          type: integer
          format: int64
          nullable: false
          minimum: 1
          example: 1
        name:
          type: string
          nullable: false
          empty: false
          example: Interstellar
        coordinates:
          $ref: "#/components/schemas/Coordinates"
        creationDate:
          type: string
          format: date-time
          nullable: false
          example: 2024-09-13T00:00:13
        oscarsCount:
          type: integer
          format: int64
          nullable: false
          minimum: 1
          example: 1
        genre:
          $ref: "#/components/schemas/MovieGenre"
        mpaaRating:
          $ref: "#/components/schemas/MpaaRating"
        screenwriter:
          $ref: "#/components/schemas/Person"
        duration:
          type: integer
          format: int64
          nullable: false
          minimum: 1
          example: 1
    MovieResponseList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/MovieResponse"
    ErrorDefault:
      type: object
      required:
        - code
        - message
        - time
      properties:
        code:
          type: integer
          format: int32
          example: 500
        message:
          type: string
          example: Internal server error
        time:
          type: string
          format: date-time
          example: 2024-09-13T00:00:13
    Error400:
      type: object
      required:
        - code
        - message
        - time
      properties:
        code:
          type: integer
          format: int32
          example: 400
        message:
          type: string
          example: Invalid input data
        time:
          type: string
          format: date-time
          example: 2024-09-13T00:00:13
    Error404:
      type: object
      required:
        - code
        - message
        - time
      properties:
        code:
          type: integer
          format: int32
          example: 404
        message:
          type: string
          example: Not Found
        time:
          type: string
          format: date-time
          example: 2024-09-13T00:00:13
    Error500:
      type: object
      required:
        - code
        - message
        - time
      properties:
        code:
          type: integer
          format: int32
          example: 500
        message:
          type: string
          example: Internal Server Error
        time:
          type: string
          format: date-time
          example: 2024-09-13T00:00:13
